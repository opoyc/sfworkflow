,"season_04","season_05","season_06","season_07","season_08"
,"season_09","season_10","season_11","trend","ar1","ar2"
,"ar3","ar4","ar5",
"ma1","ma2","ma3","ma4","ma5","drift")
# file names
files <- data.frame(file=c("[Forecast Item] - ABC XYZ Calculation.xlsx", "[Forecast Item] Configuration.xlsx"
, "Active Regressor Summary.xlsx", "Causal Factor Cleansing - Summary.xlsx"
, "Edit Regressor Values.xlsx", "Forecast Comparison.xlsx"
, "Forecast Items.xlsx", "life savings.xlsx", "Regressor Usage Summary.xlsx"
, "Regressors.xlsx", "Statistical Outliers Cleansing.xlsx")
, index=1:11, stringsAsFactors = F)
# active file
file <- tail(unlist(strsplit(file_path, split = "/")), 1)
if((file %in% files$file)==F){
stop("File name does not match with existing configuration")
}
active <- files$file[(which(grepl(pattern = file, x = files$file, fixed = T)==T))]
# reading files
if(active %in% c("[Forecast Item] Configuration.xlsx", "life savings.xlsx")){
return(
readxl::read_excel(file_path, skip = 4, col_names = forecast_item_conf_label, progress = T)
)
}
if(active=="Active Regressor Summary.xlsx"){
return(
readxl::read_excel(file_path, skip = 2, col_names = active_reg_sum_label) %>%
filter(!(regressor %in% reg_exclude)) %>%
dplyr::select(-6)
)
}
if(active=="Edit Regressor Values.xlsx"){
return(
readxl::read_excel(file_path, skip=1, col_names = edit_reg_value_label)
)
}
if(active=="Forecast Items.xlsx"){
return(
readxl::read_excel(file_path, skip=3, col_names = fcst_items_label) %>%
filter(forecast_category=="Statistical")
)
}
if(active=="Forecast Comparison.xlsx"){
return(
readxl::read_excel(file_path, skip=2) %>%
janitor::clean_names() %>%
setNames(nm = c(fcst_comp_label, names(.)[7:length(names(.))])) %>%
filter(forecast_category=="Statistical")
)
}
if(active=="[Forecast Item] - ABC XYZ Calculation.xlsx"){
return(
readxl::read_excel(file_path, skip=2, col_names = abc_xyz_calc_label)
)
}
if(active=="Regressor Usage Summary.xlsx"){
return(
readxl::read_excel(file_path, skip = 1, col_names = reg_usage_sum_label)
)
}
if(active=="Regressors.xlsx"){
return(
readxl::read_excel(file_path, skip = 1, col_names = regs_label)
)
}
if(active=="Causal Factor Cleansing - Summary.xlsx"){
return(
readxl::read_excel(file_path, skip=1) %>%
janitor::clean_names() %>%
setNames(nm = c(causal_factor_label, names(.)[4:length(names(.))])) %>%
slice(7:n())
)
}
if(active=="Statistical Outliers Cleansing.xlsx"){
return(
readxl::read_excel(file_path, skip = 1) %>%
janitor::clean_names() %>%
setNames(nm = c(stat_out_clean_label, names(.)[8:length(names(.))])) %>%
fill(category_1, .direction = "down")
)
}
}
make(plan)
vis_drake_graph(plan)
drake_config(plan)
m <- drake_config(plan)
vis_drake_graph(m)
build_times(plan)
read_knx <- function(file_path){
# labels
forecast_item_conf_label <- c("abc", "xyz", "total_buckets", "forecast_item", "active_baseline"
, "category", "unit_measure_forecast", "unit_measure_col_x8"
, "unit_measure_control_set", "actuals_category", "item_usage_rule"
, "item_status_update", "col_x13", "configured", "col_x15"
, "product_lifecycle_type", "col_x17", "set_param_set", "set_history_skip_leading_zeros"
, "set_holdout_period_usage_rule", "set_forecast_model", "set_trend_decay_factor"
, "set_fit_measure", "set_model_constant_usage", "set_calendar", "col_x26"
, "intervals_historical", "intervals_forecast", "intervals_season_cycle"
, "intervals_moving_average", "confidence_level", "col_x32", "best_fit_model_set"
, "best_fit_holdout_period", "best_fit_forecast_lag", "col_x36", "arima_constant"
, "arima_terms_ar", "arima_terms_ma", "arima_terms_diff", "col_x41", "r_forecast_param_set"
, "r_forecast_elastic_net_weight", "r_forecast_elastic_net_regularization"
, "r_forecast_arimax_constant", "r_forecast_arimax_difference_level", "autocorr_conf_level"
, "autocorr_conf_level_apply", "col_x49", "hist_demand_start_date", "hist_demand_items_actuals"
, "hist_demand_actuals_from_other_items", "hist_demand_actuals_from_count", "col_x54"
, "hist_demand_actuals_by_other_items", "col_x56", "adjustments_start", "adjustments_profile"
, "adjustments_quantity", "adjustments_multiplier", "col_x61", "forecast_start", "forecast_stop"
, "override_forecast_start", "override_forecast_stop", "outlier_type", "outlier_view"
, "outlier_has_outliers", "outlier_detec_set_rules_data", "outlier_detec_set_rules_detec"
, "outlier_detec_set_threshold", "outlier_detec_set_ma_window", "output_errors"
, "output_characteristics")
active_reg_sum_label <- c("forecast_item", "forecast_category", "forecast_model", "regressor", "lag", "regressor_action"
, "estimate", "p_value", "standard_error", "t_statistic")
edit_reg_value_label <- c("regressor", "category", "date", "quantity")
fcst_items_label <- c("select", "x", "forecast_item", "x_2", "forecast_category", "x_3"
, "r_forecast_reg_total", "r_forecast_reg_active"
, "r_forecast_reg_weight_decay_factor", "r_forecast_elastic_net_weight"
, "r_forecast_elastic_net_regu", "r_forecast_arimax_constant", "r_forecast_arimax_diff_level"
, "x_4", "set_history_skip_leading_zeros", "set_parameter_set"
, "set_param_model_constant_usage", "set_forecast_model", "set_trend_decay_factor"
, "set_autocorr_cl", "x_5", "actuals_category"
, "x_6", "intervals_historical", "intervals_forecast", "intervals_season_cycle")
abc_xyz_calc_label <- c("forecast_item", "abc", "abc_volume", "abc_revenue", "xyz", "total_volume"
, "total_volume_perc", "total_volume_cum", "total_revenue", "total_revenue_perc"
, "total_revenue_cum", "cov")
reg_usage_sum_label <- c("forecast_item", "regressor", "processing_rule", "lag")
regs_label <- c("select", "name", "category")
stat_out_clean_label <- c("forecast_item", "associated_cat_forecast", "associated_cat_historical"
, "stat_outlier_conf", "stat_outlier_sum", "category_1", "category_2")
fcst_comp_label <- c("forecast_item", "forecast_category", "actuals_category"
, "product_lifecycle", "category_1", "category_2")
causal_factor_label <- c("forecast_item", "category_1", "category_2")
reg_exclude <- c("intercept","(Intercept)","season_01","season_02","season_03"
,"season_04","season_05","season_06","season_07","season_08"
,"season_09","season_10","season_11","trend","ar1","ar2"
,"ar3","ar4","ar5",
"ma1","ma2","ma3","ma4","ma5","drift")
# file names
files <- data.frame(file=c("[Forecast Item] - ABC XYZ Calculation.xlsx", "[Forecast Item] Configuration.xlsx"
, "Active Regressor Summary.xlsx", "Causal Factor Cleansing - Summary.xlsx"
, "Edit Regressor Values.xlsx", "Forecast Comparison.xlsx"
, "Forecast Items.xlsx", "life savings.xlsx", "Regressor Usage Summary.xlsx"
, "Regressors.xlsx", "Statistical Outliers Cleansing.xlsx")
, index=1:11, stringsAsFactors = F)
# active file
file <- tail(unlist(strsplit(file_path, split = "/")), 1)
if((file %in% files$file)==F){
stop("File name does not match with existing configuration")
}
active <- files$file[(which(grepl(pattern = file, x = files$file, fixed = T)==T))]
# reading files
if(active %in% c("[Forecast Item] Configuration.xlsx", "life savings.xlsx")){
return(
readxl::read_xlsx(file_path, skip = 4, col_names = forecast_item_conf_label, progress = T)
)
}
if(active=="Active Regressor Summary.xlsx"){
return(
readxl::read_xlsx(file_path, skip = 2, col_names = active_reg_sum_label) %>%
filter(!(regressor %in% reg_exclude)) %>%
dplyr::select(-6)
)
}
if(active=="Edit Regressor Values.xlsx"){
return(
readxl::read_xlsx(file_path, skip=1, col_names = edit_reg_value_label)
)
}
if(active=="Forecast Items.xlsx"){
return(
readxl::read_xlsx(file_path, skip=3, col_names = fcst_items_label) %>%
filter(forecast_category=="Statistical")
)
}
if(active=="Forecast Comparison.xlsx"){
return(
readxl::read_xlsx(file_path, skip=2) %>%
janitor::clean_names() %>%
setNames(nm = c(fcst_comp_label, names(.)[7:length(names(.))])) %>%
filter(forecast_category=="Statistical")
)
}
if(active=="[Forecast Item] - ABC XYZ Calculation.xlsx"){
return(
readxl::read_xlsx(file_path, skip=2, col_names = abc_xyz_calc_label)
)
}
if(active=="Regressor Usage Summary.xlsx"){
return(
readxl::read_xlsx(file_path, skip = 1, col_names = reg_usage_sum_label)
)
}
if(active=="Regressors.xlsx"){
return(
readxl::read_xlsx(file_path, skip = 1, col_names = regs_label)
)
}
if(active=="Causal Factor Cleansing - Summary.xlsx"){
return(
readxl::read_xlsx(file_path, skip=1) %>%
janitor::clean_names() %>%
setNames(nm = c(causal_factor_label, names(.)[4:length(names(.))])) %>%
slice(7:n())
)
}
if(active=="Statistical Outliers Cleansing.xlsx"){
return(
readxl::read_xlsx(file_path, skip = 1) %>%
janitor::clean_names() %>%
setNames(nm = c(stat_out_clean_label, names(.)[8:length(names(.))])) %>%
fill(category_1, .direction = "down")
)
}
}
build_times(plan)
make(plan)
build_times(plan)
readd(fcst_cong)
readd(fcst_conf)
list.files()
list.files(all.files = T)
list.files(".drake")
list.files(".drake/data")
plan <- drake_plan(
# inputs
abc_xyz = read_knx(file_path = file_in('data/[Forecast Item] - ABC XYZ Calculation.xlsx'))
, fcst_conf = read_knx(file_path = file_in('data/[Forecast Item] Configuration.xlsx'))
, act_reg_sum = read_knx(file_path = file_in('data/Active Regressor Summary.xlsx'))
, causal_fact_clean = read_knx(file_path = file_in('data/Causal Factor Cleansing - Summary.xlsx'))
, edit_reg_val = read_knx(file_path = file_in('data/Edit Regressor Values.xlsx'))
, fcst_comp = read_knx(file_path = file_in('data/Forecast Comparison.xlsx'))
, fcst_items = read_knx(file_path = file_in('data/Forecast Items.xlsx'))
, life_savings = read_knx(file_path = file_in('data/life savings.xlsx'))
, reg_usage_sum = read_knx(file_path = file_in('data/Regressor Usage Summary.xlsx'))
, regs = read_knx(file_path = file_in('data/Regressors.xlsx'))
, stat_outlier_clean = read_knx(file_path = file_in('data/Statistical Outliers Cleansing.xlsx'))
# wrangling
load("//sinsdfs01/regional$/APJ-SC-HUB/SC.DATA/DATA/Active/Specific.GBU.RData")
gbu <- GBU %>%
transmute(key=paste0(substring(Market.Code,1,2),": ", GMID.Code)
, gbu=GBU) %>%
as_tibble()
)
plan <- drake_plan(
# inputs
abc_xyz = read_knx(file_path = file_in('data/[Forecast Item] - ABC XYZ Calculation.xlsx'))
, fcst_conf = read_knx(file_path = file_in('data/[Forecast Item] Configuration.xlsx'))
, act_reg_sum = read_knx(file_path = file_in('data/Active Regressor Summary.xlsx'))
, causal_fact_clean = read_knx(file_path = file_in('data/Causal Factor Cleansing - Summary.xlsx'))
, edit_reg_val = read_knx(file_path = file_in('data/Edit Regressor Values.xlsx'))
, fcst_comp = read_knx(file_path = file_in('data/Forecast Comparison.xlsx'))
, fcst_items = read_knx(file_path = file_in('data/Forecast Items.xlsx'))
, life_savings = read_knx(file_path = file_in('data/life savings.xlsx'))
, reg_usage_sum = read_knx(file_path = file_in('data/Regressor Usage Summary.xlsx'))
, regs = read_knx(file_path = file_in('data/Regressors.xlsx'))
, stat_outlier_clean = read_knx(file_path = file_in('data/Statistical Outliers Cleansing.xlsx'))
# wrangling
, load("//sinsdfs01/regional$/APJ-SC-HUB/SC.DATA/DATA/Active/Specific.GBU.RData")
, gbu = GBU %>%
transmute(key=paste0(substring(Market.Code,1,2),": ", GMID.Code)
, gbu=GBU) %>%
as_tibble()
)
make(plan)
sftools:::load_gbu()
gbu
remove.packages("sftools", lib="~/R/R-3.6.0/library")
install.packages("~/Projects/Packages/sftools_0.1.3.2.tar.gz", repos = NULL, type = "source")
gbu = sftools:::load_gbu()
plan <- drake_plan(
# inputs
abc_xyz = target(
read_knx(file_path = file_in('data/[Forecast Item] - ABC XYZ Calculation.xlsx'))
, format="fst")
, fcst_conf = read_knx(file_path = file_in('data/[Forecast Item] Configuration.xlsx'))
, act_reg_sum = read_knx(file_path = file_in('data/Active Regressor Summary.xlsx'))
, causal_fact_clean = read_knx(file_path = file_in('data/Causal Factor Cleansing - Summary.xlsx'))
, edit_reg_val = read_knx(file_path = file_in('data/Edit Regressor Values.xlsx'))
, fcst_comp = read_knx(file_path = file_in('data/Forecast Comparison.xlsx'))
, fcst_items = read_knx(file_path = file_in('data/Forecast Items.xlsx'))
, life_savings = read_knx(file_path = file_in('data/life savings.xlsx'))
, reg_usage_sum = read_knx(file_path = file_in('data/Regressor Usage Summary.xlsx'))
, regs = read_knx(file_path = file_in('data/Regressors.xlsx'))
, stat_outlier_clean = read_knx(file_path = file_in('data/Statistical Outliers Cleansing.xlsx'))
# wrangling
, gbu = sftools:::load_gbu()
)
make(plan)
install.packages("fst")
plan <- drake_plan(
# inputs
abc_xyz = target(
read_knx(file_path = file_in('data/[Forecast Item] - ABC XYZ Calculation.xlsx'))
, format="fst")
, fcst_conf = read_knx(file_path = file_in('data/[Forecast Item] Configuration.xlsx'))
, act_reg_sum = read_knx(file_path = file_in('data/Active Regressor Summary.xlsx'))
, causal_fact_clean = read_knx(file_path = file_in('data/Causal Factor Cleansing - Summary.xlsx'))
, edit_reg_val = read_knx(file_path = file_in('data/Edit Regressor Values.xlsx'))
, fcst_comp = read_knx(file_path = file_in('data/Forecast Comparison.xlsx'))
, fcst_items = read_knx(file_path = file_in('data/Forecast Items.xlsx'))
, life_savings = read_knx(file_path = file_in('data/life savings.xlsx'))
, reg_usage_sum = read_knx(file_path = file_in('data/Regressor Usage Summary.xlsx'))
, regs = read_knx(file_path = file_in('data/Regressors.xlsx'))
, stat_outlier_clean = read_knx(file_path = file_in('data/Statistical Outliers Cleansing.xlsx'))
# wrangling
, gbu = sftools:::load_gbu()
)
make(plan)
sftools:::load_gbu()
gbu
load_gbu <- function(gbu_path){
if(missing(gbu_path)){
gbu_path <- "//sinsdfs01/regional$/APJ-SC-HUB/SC.DATA/DATA/Active/Specific.GBU.Rdata"
}
load(gbu_path)
gbu <- GBU %>%
as_tibble() %>%
mutate(key=paste0(str_sub(Market.Code, start = 1, end = 2), ": ", GMID.Code)) %>%
dplyr::select(key, gmid=GMID.Code, gbu=GBU) %>%
unique() %>%
filter(gbu!="")
return(gbu)
}
plan <- drake_plan(
# inputs
abc_xyz = target(
read_knx(file_path = file_in('data/[Forecast Item] - ABC XYZ Calculation.xlsx'))
, format="fst")
, fcst_conf = read_knx(file_path = file_in('data/[Forecast Item] Configuration.xlsx'))
, act_reg_sum = read_knx(file_path = file_in('data/Active Regressor Summary.xlsx'))
, causal_fact_clean = read_knx(file_path = file_in('data/Causal Factor Cleansing - Summary.xlsx'))
, edit_reg_val = read_knx(file_path = file_in('data/Edit Regressor Values.xlsx'))
, fcst_comp = read_knx(file_path = file_in('data/Forecast Comparison.xlsx'))
, fcst_items = read_knx(file_path = file_in('data/Forecast Items.xlsx'))
, life_savings = read_knx(file_path = file_in('data/life savings.xlsx'))
, reg_usage_sum = read_knx(file_path = file_in('data/Regressor Usage Summary.xlsx'))
, regs = read_knx(file_path = file_in('data/Regressors.xlsx'))
, stat_outlier_clean = read_knx(file_path = file_in('data/Statistical Outliers Cleansing.xlsx'))
# wrangling
, gbu = load_gbu()
)
make(plan)
require(drake)
plan <- drake_plan(
# inputs
abc_xyz = target(
read_knx(file_path = file_in('data/[Forecast Item] - ABC XYZ Calculation.xlsx'))
, format="fst")
, fcst_conf = read_knx(file_path = file_in('data/[Forecast Item] Configuration.xlsx'))
, act_reg_sum = read_knx(file_path = file_in('data/Active Regressor Summary.xlsx'))
, causal_fact_clean = read_knx(file_path = file_in('data/Causal Factor Cleansing - Summary.xlsx'))
, edit_reg_val = read_knx(file_path = file_in('data/Edit Regressor Values.xlsx'))
, fcst_comp = read_knx(file_path = file_in('data/Forecast Comparison.xlsx'))
, fcst_items = read_knx(file_path = file_in('data/Forecast Items.xlsx'))
, life_savings = read_knx(file_path = file_in('data/life savings.xlsx'))
, reg_usage_sum = read_knx(file_path = file_in('data/Regressor Usage Summary.xlsx'))
, regs = read_knx(file_path = file_in('data/Regressors.xlsx'))
, stat_outlier_clean = read_knx(file_path = file_in('data/Statistical Outliers Cleansing.xlsx'))
)
make(plan)
build_times(plan)
make(plan)
vis_drake_graph(plan)
vis_drake_graph(drake_config(plan))
vis_drake_graph(drake_config(plan))
make(plan)
get_reg_table <- function(act_reg_sum, edit_reg_values){
reg_table <- act_reg_sum %>%
left_join(edit_reg_values, by = "regressor", suffix=c("_sum", "_values")) %>%
mutate(date = ymd(date)) %>%
arrange(item, regressor, date) %>%
group_by(regressor, item, category_sum, forecast_model, lag, estimate
, p_value, standard_error, t_statistic, category_values) %>%
{if (nrow(.)!=0) tidyr::complete(., date = seq.Date(from =  min(.$date)
, to = max(.$date)
, by = "month") ) else .} %>%
fill(quantity) %>%
ungroup()
return(reg_table)
}
unlink(".RData")
get_reg_table <- function(act_reg_sum, edit_reg_values){
reg_table <- act_reg_sum %>%
left_join(edit_reg_values, by = "regressor", suffix=c("_sum", "_values")) %>%
mutate(date = ymd(date)) %>%
arrange(item, regressor, date) %>%
group_by(regressor, item, category_sum, forecast_model, lag, estimate
, p_value, standard_error, t_statistic, category_values) %>%
{if (nrow(.)!=0) tidyr::complete(., date = seq.Date(from =  min(.$date)
, to = max(.$date)
, by = "month") ) else .} %>%
fill(quantity) %>%
ungroup()
return(reg_table)
}
get_reg_table <- function(act_reg_sum, edit_reg_val){
reg_table <- act_reg_sum %>%
left_join(edit_reg_val, by = "regressor", suffix=c("_sum", "_values")) %>%
mutate(date = ymd(date)) %>%
arrange(item, regressor, date) %>%
group_by(regressor, item, category_sum, forecast_model, lag, estimate
, p_value, standard_error, t_statistic, category_values) %>%
{if (nrow(.)!=0) tidyr::complete(., date = seq.Date(from =  min(.$date)
, to = max(.$date)
, by = "month") ) else .} %>%
fill(quantity) %>%
ungroup()
return(reg_table)
}
require(drake)
plan <- drake_plan(
# inputs
abc_xyz = target(
read_knx(file_path = file_in('data/[Forecast Item] - ABC XYZ Calculation.xlsx'))
, format="fst")
, fcst_conf = read_knx(file_path = file_in('data/[Forecast Item] Configuration.xlsx'))
, act_reg_sum = read_knx(file_path = file_in('data/Active Regressor Summary.xlsx'))
, causal_fact_clean = read_knx(file_path = file_in('data/Causal Factor Cleansing - Summary.xlsx'))
, edit_reg_val = read_knx(file_path = file_in('data/Edit Regressor Values.xlsx'))
, fcst_comp = read_knx(file_path = file_in('data/Forecast Comparison.xlsx'))
, fcst_items = read_knx(file_path = file_in('data/Forecast Items.xlsx'))
, life_savings = read_knx(file_path = file_in('data/life savings.xlsx'))
, reg_usage_sum = read_knx(file_path = file_in('data/Regressor Usage Summary.xlsx'))
, regs = read_knx(file_path = file_in('data/Regressors.xlsx'))
, stat_outlier_clean = read_knx(file_path = file_in('data/Statistical Outliers Cleansing.xlsx'))
, reg_table = get_reg_table(act_reg_sum, edit_reg_val)
)
config <- drake_config(plan)
vis_drake_graph(config)
make(plan)
require(tidyverse)
make(plan)
require(lubridate)
make(plan)
act_reg_sum = read_knx(file_path = file_in('data/Active Regressor Summary.xlsx'))
edit_reg_val = read_knx(file_path = file_in('data/Edit Regressor Values.xlsx'))
act_reg_sum %>%
left_join(edit_reg_val, by = "regressor", suffix=c("_sum", "_values")) %>%
mutate(date = ymd(date))
act_reg_sum %>%
left_join(edit_reg_val, by = "regressor", suffix=c("_sum", "_values")) %>%
mutate(date = ymd(date)) %>%
arrange(item, regressor, date)
act_reg_sum %>%
left_join(edit_reg_val, by = "regressor", suffix=c("_sum", "_values")) %>%
mutate(date = ymd(date)) %>%
arrange(forecast_item, regressor, date)
act_reg_sum %>%
left_join(edit_reg_val, by = "regressor", suffix=c("_sum", "_values")) %>%
mutate(date = ymd(date)) %>%
arrange(forecast_item, regressor, date) %>%
group_by(regressor, item, category_sum, forecast_model, lag, estimate
, p_value, standard_error, t_statistic, category_values) %>%
{if (nrow(.)!=0) tidyr::complete(., date = seq.Date(from =  min(.$date)
, to = max(.$date)
, by = "month") ) else .} %>%
fill(quantity) %>%
ungroup()
act_reg_sum %>%
left_join(edit_reg_val, by = "regressor", suffix=c("_sum", "_values")) %>%
mutate(date = ymd(date)) %>%
arrange(forecast_item, regressor, date) %>%
group_by(regressor, forecast_item, category_sum, forecast_model, lag, estimate
, p_value, standard_error, t_statistic, category_values) %>%
{if (nrow(.)!=0) tidyr::complete(., date = seq.Date(from =  min(.$date)
, to = max(.$date)
, by = "month") ) else .} %>%
fill(quantity) %>%
ungroup()
act_reg_sum
act_reg_sum %>%
left_join(edit_reg_val, by = "regressor", suffix=c("_sum", "_values")) %>%
mutate(date = ymd(date)) %>%
arrange(forecast_item, regressor, date) %>%
group_by(regressor, forecast_item, forecast_category, forecast_model, lag, estimate
, p_value, standard_error, t_statistic, category) %>%
{if (nrow(.)!=0) tidyr::complete(., date = seq.Date(from =  min(.$date)
, to = max(.$date)
, by = "month") ) else .} %>%
fill(quantity) %>%
ungroup()
get_reg_table <- function(act_reg_sum, edit_reg_val){
reg_table <- act_reg_sum %>%
left_join(edit_reg_val, by = "regressor", suffix=c("_sum", "_values")) %>%
mutate(date = ymd(date)) %>%
arrange(forecast_item, regressor, date) %>%
group_by(regressor, forecast_item, forecast_category, forecast_model, lag, estimate
, p_value, standard_error, t_statistic, category) %>%
{if (nrow(.)!=0) tidyr::complete(., date = seq.Date(from =  min(.$date)
, to = max(.$date)
, by = "month") ) else .} %>%
fill(quantity) %>%
ungroup()
return(reg_table)
}
plan <- drake_plan(
# inputs
abc_xyz = target(
read_knx(file_path = file_in('data/[Forecast Item] - ABC XYZ Calculation.xlsx'))
, format="fst")
, fcst_conf = read_knx(file_path = file_in('data/[Forecast Item] Configuration.xlsx'))
, act_reg_sum = read_knx(file_path = file_in('data/Active Regressor Summary.xlsx'))
, causal_fact_clean = read_knx(file_path = file_in('data/Causal Factor Cleansing - Summary.xlsx'))
, edit_reg_val = read_knx(file_path = file_in('data/Edit Regressor Values.xlsx'))
, fcst_comp = read_knx(file_path = file_in('data/Forecast Comparison.xlsx'))
, fcst_items = read_knx(file_path = file_in('data/Forecast Items.xlsx'))
, life_savings = read_knx(file_path = file_in('data/life savings.xlsx'))
, reg_usage_sum = read_knx(file_path = file_in('data/Regressor Usage Summary.xlsx'))
, regs = read_knx(file_path = file_in('data/Regressors.xlsx'))
, stat_outlier_clean = read_knx(file_path = file_in('data/Statistical Outliers Cleansing.xlsx'))
, reg_table = get_reg_table(act_reg_sum, edit_reg_val)
)
vis_drake_graph(config)
