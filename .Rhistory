, set_forecast_model=="ARIMA Default" ~ "NA"
, TRUE ~ set_forecast_model)
, to_plot=case_when(
forecast_stop<=today() ~ "NO"
, outlier_type=="Default" & is.na(hist_demand_actuals_from_other_items) ~ "NO"
, outlier_detec_set_rules_data=="Moving Average Error" & is.na(hist_demand_actuals_from_other_items) ~ "NO"
, TRUE ~ "YES")
, new_code=ifelse(is.na(hist_demand_actuals_from_other_items), "NO", "YES")
)
fcst_conf = read_knx(file_path = file_in('data/[Forecast Item] Configuration.xlsx'))
gbu = load_gbu(on_globalenv = FALSE)
gbu
fcst_conf %>%
filter(category=="Statistical") %>%
dplyr::select(forecast_item, intervals_season_cycle, forecast_stop, hist_demand_start_date
, forecast_start, active_baseline, set_param_set, set_forecast_model
, set_trend_decay_factor, arima_constant, arima_terms_ar
, arima_terms_ma, arima_terms_diff
, r_forecast_param_set, hist_demand_actuals_from_other_items
, outlier_type, outlier_detec_set_rules_data, outlier_detec_set_rules_detec
, outlier_detec_set_threshold, outlier_detec_set_ma_window) %>%
mutate_at(vars(forecast_stop, hist_demand_start_date, forecast_start), .funs = ~as.Date(.x)) %>%
{if (length(grep(x =.$forecast_item, pattern = "PT-AO"))!=0) dplyr::slice(.,-grep(x = forecast_item
, pattern = "PT-AO")) else .} %>%
mutate(loc=stringr::str_extract(forecast_item, "[A-Z]{2}")
, gmid=stringr::str_extract(forecast_item, pattern = "(?<=([A-Z]{2}: ))[0-9]+")
, description=stringr::str_extract(forecast_item, "(?<=-).*")
, key=paste0(loc,": ", gmid)
, set_forecast_model=case_when(
set_forecast_model=="Rforecast" ~ "ETS"
, set_forecast_model=="CrostonMethod" ~ "Croston"
, set_forecast_model=="MultipleLinearRegression" ~ "MLR"
, set_param_set=="ARIMA" ~ "ARIMA Default"
, TRUE~set_forecast_model)
, parameter=case_when(
set_forecast_model=="ETS" ~ paste(r_forecast_param_set, "Trend Decay: ", as.numeric(set_trend_decay_factor))
, set_forecast_model=="MLR" ~ paste("MLR Trend Decay: ", as.numeric(set_trend_decay_factor))
, set_forecast_model=="ARIMA" ~ paste("(", arima_terms_ar, arima_terms_diff, arima_terms_ma, ") Constant: ", arima_constant)
, set_forecast_model=="ARIMA Default" ~ "NA"
, TRUE ~ set_forecast_model)
, to_plot=case_when(
forecast_stop<=today() ~ "NO"
, outlier_type=="Default" & is.na(hist_demand_actuals_from_other_items) ~ "NO"
, outlier_detec_set_rules_data=="Moving Average Error" & is.na(hist_demand_actuals_from_other_items) ~ "NO"
, TRUE ~ "YES")
, new_code=ifelse(is.na(hist_demand_actuals_from_other_items), "NO", "YES")
)
fcst_items = read_knx(file_path = file_in('data/Forecast Items.xlsx'))
fcst_items
, fcst_items_params = read_knx(file_path = file_in('data/Forecast Items.xlsx'))
fcst_items_params = read_knx(file_path = file_in('data/Forecast Items.xlsx'))
fcst_conf %>%
filter(category=="Statistical") %>%
dplyr::select(forecast_item, intervals_season_cycle, forecast_stop, hist_demand_start_date
, forecast_start, active_baseline, set_param_set, set_forecast_model
, set_trend_decay_factor, arima_constant, arima_terms_ar
, arima_terms_ma, arima_terms_diff
, r_forecast_param_set, hist_demand_actuals_from_other_items
, outlier_type, outlier_detec_set_rules_data, outlier_detec_set_rules_detec
, outlier_detec_set_threshold, outlier_detec_set_ma_window) %>%
mutate_at(vars(forecast_stop, hist_demand_start_date, forecast_start), .funs = ~as.Date(.x)) %>%
{if (length(grep(x =.$forecast_item, pattern = "PT-AO"))!=0) dplyr::slice(.,-grep(x = forecast_item
, pattern = "PT-AO")) else .} %>%
mutate(loc=stringr::str_extract(forecast_item, "[A-Z]{2}")
, gmid=stringr::str_extract(forecast_item, pattern = "(?<=([A-Z]{2}: ))[0-9]+")
, description=stringr::str_extract(forecast_item, "(?<=-).*")
, key=paste0(loc,": ", gmid)
, set_forecast_model=case_when(
set_forecast_model=="Rforecast" ~ "ETS"
, set_forecast_model=="CrostonMethod" ~ "Croston"
, set_forecast_model=="MultipleLinearRegression" ~ "MLR"
, set_param_set=="ARIMA" ~ "ARIMA Default"
, TRUE~set_forecast_model)
, parameter=case_when(
set_forecast_model=="ETS" ~ paste(r_forecast_param_set, "Trend Decay: ", as.numeric(set_trend_decay_factor))
, set_forecast_model=="MLR" ~ paste("MLR Trend Decay: ", as.numeric(set_trend_decay_factor))
, set_forecast_model=="ARIMA" ~ paste("(", arima_terms_ar, arima_terms_diff, arima_terms_ma, ") Constant: ", arima_constant)
, set_forecast_model=="ARIMA Default" ~ "NA"
, TRUE ~ set_forecast_model)
, to_plot=case_when(
forecast_stop<=today() ~ "NO"
, outlier_type=="Default" & is.na(hist_demand_actuals_from_other_items) ~ "NO"
, outlier_detec_set_rules_data=="Moving Average Error" & is.na(hist_demand_actuals_from_other_items) ~ "NO"
, TRUE ~ "YES")
, new_code=ifelse(is.na(hist_demand_actuals_from_other_items), "NO", "YES")
) %>%
dplyr::select(loc, gmid, description, key, forecast_item, active_baseline
, set_forecast_model, parameter, everything()
, -forecast_start,-set_param_set,-set_trend_decay_factor
, -arima_constant,-arima_terms_ar,-arima_terms_ma
, -arima_terms_diff,-r_forecast_param_set, -outlier_type) %>%
left_join(
gbu
, by=c("key"), suffix=c("_origin", "_gbu")
) %>%
left_join(
fcst_items_params, by=c("forecast_item"="item")
) %>%
mutate(gbu=ifelse(gbu %in% c("PRC", "CHC", "GZ", "VAC", "CEM"), "", gbu))
fcst_conf %>%
filter(category=="Statistical") %>%
dplyr::select(forecast_item, intervals_season_cycle, forecast_stop, hist_demand_start_date
, forecast_start, active_baseline, set_param_set, set_forecast_model
, set_trend_decay_factor, arima_constant, arima_terms_ar
, arima_terms_ma, arima_terms_diff
, r_forecast_param_set, hist_demand_actuals_from_other_items
, outlier_type, outlier_detec_set_rules_data, outlier_detec_set_rules_detec
, outlier_detec_set_threshold, outlier_detec_set_ma_window) %>%
mutate_at(vars(forecast_stop, hist_demand_start_date, forecast_start), .funs = ~as.Date(.x)) %>%
{if (length(grep(x =.$forecast_item, pattern = "PT-AO"))!=0) dplyr::slice(.,-grep(x = forecast_item
, pattern = "PT-AO")) else .} %>%
mutate(loc=stringr::str_extract(forecast_item, "[A-Z]{2}")
, gmid=stringr::str_extract(forecast_item, pattern = "(?<=([A-Z]{2}: ))[0-9]+")
, description=stringr::str_extract(forecast_item, "(?<=-).*")
, key=paste0(loc,": ", gmid)
, set_forecast_model=case_when(
set_forecast_model=="Rforecast" ~ "ETS"
, set_forecast_model=="CrostonMethod" ~ "Croston"
, set_forecast_model=="MultipleLinearRegression" ~ "MLR"
, set_param_set=="ARIMA" ~ "ARIMA Default"
, TRUE~set_forecast_model)
, parameter=case_when(
set_forecast_model=="ETS" ~ paste(r_forecast_param_set, "Trend Decay: ", as.numeric(set_trend_decay_factor))
, set_forecast_model=="MLR" ~ paste("MLR Trend Decay: ", as.numeric(set_trend_decay_factor))
, set_forecast_model=="ARIMA" ~ paste("(", arima_terms_ar, arima_terms_diff, arima_terms_ma, ") Constant: ", arima_constant)
, set_forecast_model=="ARIMA Default" ~ "NA"
, TRUE ~ set_forecast_model)
, to_plot=case_when(
forecast_stop<=today() ~ "NO"
, outlier_type=="Default" & is.na(hist_demand_actuals_from_other_items) ~ "NO"
, outlier_detec_set_rules_data=="Moving Average Error" & is.na(hist_demand_actuals_from_other_items) ~ "NO"
, TRUE ~ "YES")
, new_code=ifelse(is.na(hist_demand_actuals_from_other_items), "NO", "YES")
) %>%
dplyr::select(loc, gmid, description, key, forecast_item, active_baseline
, set_forecast_model, parameter, everything()
, -forecast_start,-set_param_set,-set_trend_decay_factor
, -arima_constant,-arima_terms_ar,-arima_terms_ma
, -arima_terms_diff,-r_forecast_param_set, -outlier_type) %>%
left_join(
gbu
, by=c("key"), suffix=c("_origin", "_gbu")
) %>%
left_join(
fcst_items_params, by=c("forecast_item")
) %>%
mutate(gbu=ifelse(gbu %in% c("PRC", "CHC", "GZ", "VAC", "CEM"), "", gbu))
model_paramsF <- function(fcst_conf, gbu, fcst_items_params){
model_params <- fcst_conf %>%
filter(category=="Statistical") %>%
dplyr::select(forecast_item, intervals_season_cycle, forecast_stop, hist_demand_start_date
, forecast_start, active_baseline, set_param_set, set_forecast_model
, set_trend_decay_factor, arima_constant, arima_terms_ar
, arima_terms_ma, arima_terms_diff
, r_forecast_param_set, hist_demand_actuals_from_other_items
, outlier_type, outlier_detec_set_rules_data, outlier_detec_set_rules_detec
, outlier_detec_set_threshold, outlier_detec_set_ma_window) %>%
mutate_at(vars(forecast_stop, hist_demand_start_date, forecast_start), .funs = ~as.Date(.x)) %>%
{if (length(grep(x =.$forecast_item, pattern = "PT-AO"))!=0) dplyr::slice(.,-grep(x = forecast_item
, pattern = "PT-AO")) else .} %>%
mutate(loc=stringr::str_extract(forecast_item, "[A-Z]{2}")
, gmid=stringr::str_extract(forecast_item, pattern = "(?<=([A-Z]{2}: ))[0-9]+")
, description=stringr::str_extract(forecast_item, "(?<=-).*")
, key=paste0(loc,": ", gmid)
, set_forecast_model=case_when(
set_forecast_model=="Rforecast" ~ "ETS"
, set_forecast_model=="CrostonMethod" ~ "Croston"
, set_forecast_model=="MultipleLinearRegression" ~ "MLR"
, set_param_set=="ARIMA" ~ "ARIMA Default"
, TRUE~set_forecast_model)
, parameter=case_when(
set_forecast_model=="ETS" ~ paste(r_forecast_param_set, "Trend Decay: ", as.numeric(set_trend_decay_factor))
, set_forecast_model=="MLR" ~ paste("MLR Trend Decay: ", as.numeric(set_trend_decay_factor))
, set_forecast_model=="ARIMA" ~ paste("(", arima_terms_ar, arima_terms_diff, arima_terms_ma, ") Constant: ", arima_constant)
, set_forecast_model=="ARIMA Default" ~ "NA"
, TRUE ~ set_forecast_model)
, to_plot=case_when(
forecast_stop<=today() ~ "NO"
, outlier_type=="Default" & is.na(hist_demand_actuals_from_other_items) ~ "NO"
, outlier_detec_set_rules_data=="Moving Average Error" & is.na(hist_demand_actuals_from_other_items) ~ "NO"
, TRUE ~ "YES")
, new_code=ifelse(is.na(hist_demand_actuals_from_other_items), "NO", "YES")
) %>%
dplyr::select(loc, gmid, description, key, forecast_item, active_baseline
, set_forecast_model, parameter, everything()
, -forecast_start,-set_param_set,-set_trend_decay_factor
, -arima_constant,-arima_terms_ar,-arima_terms_ma
, -arima_terms_diff,-r_forecast_param_set, -outlier_type) %>%
left_join(gbu, by=c("key"), suffix=c("_origin", "_gbu")) %>%
left_join(fcst_items_params, by=c("forecast_item")) %>%
mutate(gbu=ifelse(gbu %in% c("PRC", "CHC", "GZ", "VAC", "CEM"), "", gbu))
return(model_params)
}
get_model_params <- function(fcst_conf, gbu, fcst_items_params){
model_params <- fcst_conf %>%
filter(category=="Statistical") %>%
dplyr::select(forecast_item, intervals_season_cycle, forecast_stop, hist_demand_start_date
, forecast_start, active_baseline, set_param_set, set_forecast_model
, set_trend_decay_factor, arima_constant, arima_terms_ar
, arima_terms_ma, arima_terms_diff
, r_forecast_param_set, hist_demand_actuals_from_other_items
, outlier_type, outlier_detec_set_rules_data, outlier_detec_set_rules_detec
, outlier_detec_set_threshold, outlier_detec_set_ma_window) %>%
mutate_at(vars(forecast_stop, hist_demand_start_date, forecast_start), .funs = ~as.Date(.x)) %>%
{if (length(grep(x =.$forecast_item, pattern = "PT-AO"))!=0) dplyr::slice(.,-grep(x = forecast_item
, pattern = "PT-AO")) else .} %>%
mutate(loc=stringr::str_extract(forecast_item, "[A-Z]{2}")
, gmid=stringr::str_extract(forecast_item, pattern = "(?<=([A-Z]{2}: ))[0-9]+")
, description=stringr::str_extract(forecast_item, "(?<=-).*")
, key=paste0(loc,": ", gmid)
, set_forecast_model=case_when(
set_forecast_model=="Rforecast" ~ "ETS"
, set_forecast_model=="CrostonMethod" ~ "Croston"
, set_forecast_model=="MultipleLinearRegression" ~ "MLR"
, set_param_set=="ARIMA" ~ "ARIMA Default"
, TRUE~set_forecast_model)
, parameter=case_when(
set_forecast_model=="ETS" ~ paste(r_forecast_param_set, "Trend Decay: ", as.numeric(set_trend_decay_factor))
, set_forecast_model=="MLR" ~ paste("MLR Trend Decay: ", as.numeric(set_trend_decay_factor))
, set_forecast_model=="ARIMA" ~ paste("(", arima_terms_ar, arima_terms_diff, arima_terms_ma, ") Constant: ", arima_constant)
, set_forecast_model=="ARIMA Default" ~ "NA"
, TRUE ~ set_forecast_model)
, to_plot=case_when(
forecast_stop<=today() ~ "NO"
, outlier_type=="Default" & is.na(hist_demand_actuals_from_other_items) ~ "NO"
, outlier_detec_set_rules_data=="Moving Average Error" & is.na(hist_demand_actuals_from_other_items) ~ "NO"
, TRUE ~ "YES")
, new_code=ifelse(is.na(hist_demand_actuals_from_other_items), "NO", "YES")
) %>%
dplyr::select(loc, gmid, description, key, forecast_item, active_baseline
, set_forecast_model, parameter, everything()
, -forecast_start,-set_param_set,-set_trend_decay_factor
, -arima_constant,-arima_terms_ar,-arima_terms_ma
, -arima_terms_diff,-r_forecast_param_set, -outlier_type) %>%
left_join(gbu, by=c("key"), suffix=c("_origin", "_gbu")) %>%
left_join(fcst_items_params, by=c("forecast_item")) %>%
mutate(gbu=ifelse(gbu %in% c("PRC", "CHC", "GZ", "VAC", "CEM"), "", gbu))
return(model_params)
}
vis_drake_graph(config)
source("functions.R")
source("load_packages.R")
plan <- drake_plan(
# inputs
abc_xyz = target(
read_knx(file_path = file_in('data/[Forecast Item] - ABC XYZ Calculation.xlsx'))
, format="fst")
, fcst_conf = read_knx(file_path = file_in('data/[Forecast Item] Configuration.xlsx'))
, act_reg_sum = read_knx(file_path = file_in('data/Active Regressor Summary.xlsx'))
, causal_fact_clean = read_knx(file_path = file_in('data/Causal Factor Cleansing - Summary.xlsx'))
, edit_reg_val = read_knx(file_path = file_in('data/Edit Regressor Values.xlsx'))
, fcst_comp = read_knx(file_path = file_in('data/Forecast Comparison.xlsx'))
, fcst_items_params = read_knx(file_path = file_in('data/Forecast Items.xlsx'))
, life_savings = read_knx(file_path = file_in('data/life savings.xlsx'))
, reg_usage_sum = read_knx(file_path = file_in('data/Regressor Usage Summary.xlsx'))
, regressors = read_knx(file_path = file_in('data/Regressors.xlsx'))
, stat_outlier_clean = read_knx(file_path = file_in('data/Statistical Outliers Cleansing.xlsx'))
, gbu = load_gbu(on_globalenv = FALSE)
# wrangling and converting
, reg_table = get_reg_table(act_reg_sum, edit_reg_val)
, model_params = get_model_params(fcst_conf, gbu, fcst_items_params)
)
config <- drake_config(plan)
vis_drake_graph(config)
make(plan)
stat_outlier_clean
stat_outlier_clean = read_knx(file_path = file_in('data/Statistical Outliers Cleansing.xlsx'))
stat_outlier_clean
stat_outlier_clean %>% glimpse()
stat_outlier_clean$category_2 %>% table()
names(stat_outlier_clean)
stat_outlier_clean %>%
filter(category_2=="Cleansed History") %>%
mutate(type=NA) %>%
select(-stat_outlier_sum, -stat_outlier_conf)
c <- "PT-AO: fdeffef"
stringr::str_detect(c, pattern = "PT")
stringr::str_detect(c, pattern = "PT-AO")
fcst_conf %>%
filter(stringr::str_detect("PT-AO"))
fcst_conf = read_knx(file_path = file_in('data/[Forecast Item] Configuration.xlsx'))
fcst_conf %>%
filter(stringr::str_detect("PT-AO"))
fcst_conf %>%
filter(stringr::str_detect(forecast_item, "PT-AO"))
fcst_conf$forecast_item
fcst_conf %>%
filter(stringr::str_detect(forecast_item, "SE: "))
%nin% <- Negate(´%in%´)
´%nin%´ <- Negate(%in%)
%nin% <- Negate(%in%)
"%nin%" <- Negate("%in%")
1 %nin% 1:2
1 %nin% 2:10
fcst_conf$forecast_stop
prunned_prods
fcst_conf %>%
filter(forecast_item %nin% angola_prods$forecast_item) %>%
select(forecast_item, forecast_stop) %>%
filter(forecast_stop < lubridate::floor_date(today(),"month")) %>%
filter(forecast_stop!=lubridate::ymd("1995-01-01"))
angola_prods <- fcst_conf %>%
filter(stringr::str_detect(forecast_item, "PT-AO:"))
prunned_prods <- fcst_conf %>%
filter(forecast_item %nin% angola_prods$forecast_item) %>%
select(forecast_item, forecast_stop) %>%
filter(forecast_stop < lubridate::floor_date(today(),"month")) %>%
filter(forecast_stop!=lubridate::ymd("1995-01-01"))
prunned_prods
get_angola_prods <- function(fcst_conf){
fcst_conf %>%
filter(stringr::str_detect(forecast_item, "PT-AO:"))
}
get_prunned_prods <- function(fcst_conf, angola_prods){
fcst_conf %>%
filter(forecast_item %nin% angola_prods$forecast_item) %>%
select(forecast_item, forecast_stop) %>%
filter(forecast_stop < lubridate::floor_date(today(),"month")) %>%
filter(forecast_stop!=lubridate::ymd("1995-01-01"))
}
vis_drake_graph(config)
plan <- drake_plan(
# inputs
abc_xyz = target(
read_knx(file_path = file_in('data/[Forecast Item] - ABC XYZ Calculation.xlsx'))
, format="fst")
, fcst_conf = read_knx(file_path = file_in('data/[Forecast Item] Configuration.xlsx'))
, act_reg_sum = read_knx(file_path = file_in('data/Active Regressor Summary.xlsx'))
, causal_fact_clean = read_knx(file_path = file_in('data/Causal Factor Cleansing - Summary.xlsx'))
, edit_reg_val = read_knx(file_path = file_in('data/Edit Regressor Values.xlsx'))
, fcst_comp = read_knx(file_path = file_in('data/Forecast Comparison.xlsx'))
, fcst_items_params = read_knx(file_path = file_in('data/Forecast Items.xlsx'))
, life_savings = read_knx(file_path = file_in('data/life savings.xlsx'))
, reg_usage_sum = read_knx(file_path = file_in('data/Regressor Usage Summary.xlsx'))
, regressors = read_knx(file_path = file_in('data/Regressors.xlsx'))
, stat_outlier_clean = read_knx(file_path = file_in('data/Statistical Outliers Cleansing.xlsx'))
, gbu = load_gbu(on_globalenv = FALSE)
# wrangling and converting
, reg_table = get_reg_table(act_reg_sum, edit_reg_val)
, model_params = get_model_params(fcst_conf, gbu, fcst_items_params)
, angola_prods = get_angola_prods(fcst_conf)
, prunned_prods = get_prunned_prods(fcst_conf, angola_prods)
)
vis_drake_graph(config)
config <- drake_config(plan)
vis_drake_graph(config)
make(plan)
config <- drake_config(plan)
vis_drake_graph(config)
stat_outlier_clean %>%
select(-stat_outlier_sum, -stat_outlier_conf) %>%
filter(category_2=="Cleansed History") %>%
mutate(type=NA) %>%
filter(forecast_item %nin% c(angola_prods$forecast_item, prunned_prods$forecast_item))
stat_outlier_clean = read_knx(file_path = file_in('data/Statistical Outliers Cleansing.xlsx'))
stat_outlier_clean %>%
select(-stat_outlier_sum, -stat_outlier_conf) %>%
filter(category_2=="Cleansed History") %>%
mutate(type=NA) %>%
filter(forecast_item %nin% c(angola_prods$forecast_item, prunned_prods$forecast_item))
angola_prods <- fcst_conf %>%
filter(stringr::str_detect(forecast_item, "PT-AO:"))
fcst_conf = read_knx(file_path = file_in('data/[Forecast Item] Configuration.xlsx'))
angola_prods <- fcst_conf %>%
filter(stringr::str_detect(forecast_item, "PT-AO:"))
prunned_prods <- fcst_conf %>%
filter(forecast_item %nin% angola_prods$forecast_item) %>%
select(forecast_item, forecast_stop) %>%
filter(forecast_stop < lubridate::floor_date(today(),"month")) %>%
filter(forecast_stop!=lubridate::ymd("1995-01-01"))
stat_outlier_clean %>%
select(-stat_outlier_sum, -stat_outlier_conf) %>%
filter(category_2=="Cleansed History") %>%
mutate(type=NA) %>%
filter(forecast_item %nin% c(angola_prods$forecast_item, prunned_prods$forecast_item))
stat_outlier_clean
stat_outlier_clean %>%
select(-stat_outlier_sum, -stat_outlier_conf) %>%
filter(category_2=="Cleansed History") %>%
mutate(type=NA)
angola_prods$forecast_item
angola_prods
get_cleaned_data_before_outier <- function(stat_outlier_clean, angola_prods, prunned_prods){
stat_outlier_clean %>%
select(-stat_outlier_sum, -stat_outlier_conf) %>%
filter(category_2=="Cleansed History") %>%
mutate(type=NA) %>%
filter(forecast_item %nin% c(angola_prods$forecast_item, prunned_prods$forecast_item))
}
get_cleaned_data_before_outlier <- function(stat_outlier_clean, angola_prods, prunned_prods){
stat_outlier_clean %>%
select(-stat_outlier_sum, -stat_outlier_conf) %>%
filter(category_2=="Cleansed History") %>%
mutate(type=NA) %>%
filter(forecast_item %nin% c(angola_prods$forecast_item, prunned_prods$forecast_item))
}
get_cleaned_data_before_outlier(stat_outlier_clean, angola_prods, prunned_prods)
fcst_comp = read_knx(file_path = file_in('data/Forecast Comparison.xlsx'))
fcst_comp
fcst_comp %>% glimpse()
fcst_comp %>%
filter(category_1=="Raw Actuals", forecast_category=="Statistical", actuals_category=="HistoricalSales")
fcst_comp %>%
filter(category_1=="Cleansed History")
sales_cleansed <- fcst_comp %>%
filter(category_1=="Cleansed History")
sales_ck
sales_cleansed
sales_cleansed$category_1 %>% table()
fcst_comp
get_sales_raw_def <- function(fcst_comp){
# NEW ACTUALS CATEGORY FOUND IN KINAXIS WITH PATIENT BASED COMMERCIAL EQUIVALENT
fcst_comp %>%
filter(category_1=="Raw Actuals"
, forecast_category=="Statistical"
, actuals_category=="HistoricalSales")
}
get_sales_cleansed <- function(fcst_comp){
fcst_comp %>%
filter(category_1=="Cleansed History")
}
source("functions.R")
source("load_packages.R")
plan <- drake_plan(
# inputs
abc_xyz = read_knx(file_path = file_in('data/[Forecast Item] - ABC XYZ Calculation.xlsx'))
, fcst_conf = read_knx(file_path = file_in('data/[Forecast Item] Configuration.xlsx'))
, act_reg_sum = read_knx(file_path = file_in('data/Active Regressor Summary.xlsx'))
, causal_fact_clean = read_knx(file_path = file_in('data/Causal Factor Cleansing - Summary.xlsx'))
, edit_reg_val = read_knx(file_path = file_in('data/Edit Regressor Values.xlsx'))
, fcst_comp = read_knx(file_path = file_in('data/Forecast Comparison.xlsx'))
, fcst_items_params = read_knx(file_path = file_in('data/Forecast Items.xlsx'))
, life_savings = read_knx(file_path = file_in('data/life savings.xlsx'))
, reg_usage_sum = read_knx(file_path = file_in('data/Regressor Usage Summary.xlsx'))
, regressors = read_knx(file_path = file_in('data/Regressors.xlsx'))
, stat_outlier_clean = read_knx(file_path = file_in('data/Statistical Outliers Cleansing.xlsx'))
, gbu = load_gbu(on_globalenv = FALSE)
# wrangling and converting
, reg_table = get_reg_table(act_reg_sum, edit_reg_val)
, model_params = get_model_params(fcst_conf, gbu, fcst_items_params)
, angola_prods = get_angola_prods(fcst_conf)
, prunned_prods = get_prunned_prods(fcst_conf, angola_prods)
, cleaned_data_before_outier <- get_cleaned_data_before_outlier(stat_outlier_clean, angola_prods, prunned_prods)
, sales_raw_def = get_sales_raw_def(fcst_comp)
, sales_cleansed = get_sales_cleansed(fcst_comp)
)
config <- drake_config(plan)
vis_drake_graph(config)
make(plan)
source("functions.R")
source("load_packages.R")
plan <- drake_plan(
# inputs
abc_xyz = read_knx(file_path = file_in('data/[Forecast Item] - ABC XYZ Calculation.xlsx'))
, fcst_conf = read_knx(file_path = file_in('data/[Forecast Item] Configuration.xlsx'))
, act_reg_sum = read_knx(file_path = file_in('data/Active Regressor Summary.xlsx'))
, causal_fact_clean = read_knx(file_path = file_in('data/Causal Factor Cleansing - Summary.xlsx'))
, edit_reg_val = read_knx(file_path = file_in('data/Edit Regressor Values.xlsx'))
, fcst_comp = read_knx(file_path = file_in('data/Forecast Comparison.xlsx'))
, fcst_items_params = read_knx(file_path = file_in('data/Forecast Items.xlsx'))
, life_savings = read_knx(file_path = file_in('data/life savings.xlsx'))
, reg_usage_sum = read_knx(file_path = file_in('data/Regressor Usage Summary.xlsx'))
, regressors = read_knx(file_path = file_in('data/Regressors.xlsx'))
, stat_outlier_clean = read_knx(file_path = file_in('data/Statistical Outliers Cleansing.xlsx'))
, gbu = load_gbu(on_globalenv = FALSE)
# wrangling and converting
, reg_table = get_reg_table(act_reg_sum, edit_reg_val)
, model_params = get_model_params(fcst_conf, gbu, fcst_items_params)
, angola_prods = get_angola_prods(fcst_conf)
, prunned_prods = get_prunned_prods(fcst_conf, angola_prods)
, cleaned_data_before_outier = get_cleaned_data_before_outlier(stat_outlier_clean, angola_prods, prunned_prods)
, sales_raw_def = get_sales_raw_def(fcst_comp)
, sales_cleansed = get_sales_cleansed(fcst_comp)
)
config <- drake_config(plan)
vis_drake_graph(config)
make(plan)
vis_drake_graph(config)
sftools:::load_lifesavers()
sftools:::load_gbu()
lifesavers
devtools::update_packages()
remove.packages("sftools", lib="~/R/R-3.6.0/library")
install.packages("~/Projects/Packages/sftools_0.1.3.3.tar.gz", repos = NULL, type = "source")
sftools:::load_gbu()
sftools:::load_gbu()
ls <- sftools:::load_lifesavers()
remove.packages("sftools", lib="~/R/R-3.6.0/library")
install.packages("~/Projects/Packages/sftools_0.1.3.3.tar.gz", repos = NULL, type = "source")
gbu <- sftools:::load_gbu()
ls <- sftools:::load_lifesavers()
gbu <- sftools:::load_gbu()
ls <- sftools:::load_lifesavers()
ls
require(tidyverse)
left_join(gbu)
ls %>%
left_join(gbu)
gbu
head(gbu)
head(ls)
ls %>%
left_join(gbu, by = "key")
ls %>%
left_join(gbu, by = "key") %>%
filter(stringr::str_detect(key, "SE: "))
ls %>%
left_join(gbu, by = "key") %>%
filter(gbu=="CHC", stringr::str_detect(key, "SE: "))
ls %>%
left_join(gbu, by = "key") %>%
filter(gbu=="CHC")
